// Generated by CoffeeScript 1.5.0
(function() {
  var ELOPHANT_BASE, ELOPHANT_REGIONS, Summoner, async, buildOptionsCallback, buildURL, callAPI, fixMethod, nconf, path, qs, request, _,
    __slice = [].slice;

  path = require('path');

  qs = require('querystring');

  _ = require('underscore');

  request = require('request');

  nconf = require('nconf');

  async = require('async');

  Summoner = require('./summoner');

  ELOPHANT_BASE = "http://api.elophant.com/v2/";

  ELOPHANT_REGIONS = ["na", "euw", "eune", "br"];

  buildURL = module.exports.buildURL = function() {
    var apikey, args, method, region;
    region = arguments[0], apikey = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (!(!region || _.contains(ELOPHANT_REGIONS, region))) {
      console.error("Region " + region + " isn't support by Elophant and will likely fail.");
    }
    apikey = apikey ? "?" + qs.stringify({
      key: apikey
    }) : "";
    args = _.chain(args).flatten().compact().map(encodeURIComponent).value();
    method = args.join("/") || null;
    return ELOPHANT_BASE + path.join(region, method) + apikey;
  };

  callAPI = module.exports.callAPI = function(url, cb) {
    return request({
      uri: url,
      json: true
    }, function(err, res, body) {
      if (err) {
        return cb(err);
      } else if (res.statusCode >= 400 || !_.isObject(body)) {
        return cb(new Error("Couldn't connect to the given resource."));
      } else if (body.success && body.data) {
        return cb(null, body.data);
      } else if (body.error) {
        return cb(new Error(body.error));
      } else {
        return cb(new Error("Unknown error occured while making request."));
      }
    });
  };

  buildOptionsCallback = function(options, callback) {
    var _ref;
    if (_.isFunction(options)) {
      _ref = [options, {}], callback = _ref[0], options = _ref[1];
    }
    if (!_.isFunction(callback)) {
      callback = function(err) {
        throw err;
      };
    }
    options = _.defaults(options || {}, {
      region: nconf.get("ELOPHANT:REGION"),
      apikey: nconf.get("ELOPHANT:APIKEY")
    });
    return [options, callback];
  };

  fixMethod = function(method) {
    return method.replace(/_([a-z])/gi, function() {
      var $;
      $ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $[1].toUpperCase();
    });
  };

  /*
  API METHODS
  */


  module.exports.items = function(o, cb) {
    var url, _ref;
    _ref = buildOptionsCallback(o, cb), o = _ref[0], cb = _ref[1];
    url = buildURL(null, o.apikey, "items");
    return callAPI(url, cb);
  };

  module.exports.champions = function(o, cb) {
    var url, _ref;
    _ref = buildOptionsCallback(o, cb), o = _ref[0], cb = _ref[1];
    url = buildURL(null, o.apikey, "champions");
    return callAPI(url, cb);
  };

  _.each(["summoner", "mastery_pages", "rune_pages", "recent_games", "leagues", "summoner_team_info", "in_progress_game_info", "team", "find_team"], function(method) {
    var fnc;
    fnc = function(arg, o, cb) {
      var url, _ref;
      _ref = buildOptionsCallback(o, cb), o = _ref[0], cb = _ref[1];
      url = buildURL(o.region, o.apikey, method, arg);
      return callAPI(url, cb);
    };
    return module.exports[method] = fnc;
  });

  module.exports.summoner = function(sid, o, cb) {
    var callback, url, _ref;
    _ref = buildOptionsCallback(o, cb), o = _ref[0], cb = _ref[1];
    _.defaults(o, {
      complex: false
    });
    if (o.complex) {
      callback = function(err, data) {
        if (err) {
          return cb(err);
        } else {
          return cb(null, new Summoner(data));
        }
      };
    } else {
      callback = cb;
    }
    url = buildURL(o.region, o.apikey, "summoner", sid);
    return callAPI(url, callback);
  };

  module.exports.ranked_stats = function(aid, season, o, cb) {
    var url, _ref, _ref1;
    if (_.isObject(season)) {
      _ref = [o, season, null], cb = _ref[0], o = _ref[1], season = _ref[2];
    }
    _ref1 = buildOptionsCallback(o, cb), o = _ref1[0], cb = _ref1[1];
    url = buildURL(o.region, o.apikey, "ranked_stats", aid, season);
    return callAPI(url, cb);
  };

  module.exports.summoner_names = function(ids, o, cb) {
    var callback, url, _ref;
    if (_.isArray(ids)) {
      ids = ids.join(",");
    }
    if (_.isNumber(ids)) {
      ids = ids.toString(10);
    }
    if (!_.isString(ids)) {
      throw new Error("Expecting a string, number or array for summonerIds.");
    }
    _ref = buildOptionsCallback(o, cb), o = _ref[0], cb = _ref[1];
    _.defaults(o, {
      complex: false
    });
    if (o.complex) {
      callback = function(err, data) {
        if (err) {
          return cb(err);
        } else if (_.isArray(data)) {
          return async.map(data, (function(name, acb) {
            var S;
            S = new Summoner(name);
            acb = _.once(acb);
            S.once("ready", function() {
              return acb(null, S);
            });
            return S.once("error", function(err) {
              return acb(err);
            });
          }), function(err, summoners) {
            if (err) {
              return cb(err);
            } else {
              return cb(null, summoners);
            }
          });
        } else {
          return cb(null, []);
        }
      };
    } else {
      callback = cb;
    }
    url = buildURL(o.region, o.apikey, "summoner_names", ids);
    url = url.replace("%2C", ",");
    return callAPI(url, callback);
  };

  module.exports.team_end_of_game_stats = function(tid, gid, o, cb) {
    var url, _ref;
    _ref = buildOptionsCallback(o, cb), o = _ref[0], cb = _ref[1];
    url = buildURL(o.region, o.apikey, "team", tid, "end_of_game_stats", gid);
    return callAPI(url, cb);
  };

  module.exports.team_ranked_stats = function(tid, o, cb) {
    var url, _ref;
    _ref = buildOptionsCallback(o, cb), o = _ref[0], cb = _ref[1];
    url = buildURL(o.region, o.apikey, "team", tid, "ranked_stats");
    return callAPI(url, cb);
  };

  _.each(module.exports, function(m, n) {
    var jsmn;
    jsmn = fixMethod(n);
    if (jsmn !== n) {
      return module.exports[jsmn] = m;
    }
  });

  /*
  
  All API URLS :
  
  http://api.elophant.com/v2/items
  http://api.elophant.com/v2/champions
  http://api.elophant.com/v2/<region>/summoner/<summonerName>
  http://api.elophant.com/v2/<region>/mastery_pages/<summonerId>
  http://api.elophant.com/v2/<region>/rune_pages/<summonerId>
  http://api.elophant.com/v2/<region>/recent_games/<accountId>
  http://api.elophant.com/v2/<region>/summoner_names/<summonerIds>
  http://api.elophant.com/v2/<region>/leagues/<summonerId>
  http://api.elophant.com/v2/<region>/ranked_stats/<accountId>
  http://api.elophant.com/v2/<region>/summoner_team_info/<summonerId>
  http://api.elophant.com/v2/<region>/in_progress_game_info/<summonerName>
  http://api.elophant.com/v2/<region>/team/<teamId>
  http://api.elophant.com/v2/<region>/find_team/<tagOrName>
  http://api.elophant.com/v2/<region>/team/<teamId>/end_of_game_stats/<gameId>
  http://api.elophant.com/v2/<region>/team/<teamId>/ranked_stats
  */


}).call(this);
