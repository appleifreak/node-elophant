// Generated by CoffeeScript 1.5.0
(function() {
  var EventEmitter, Summoner, api, nconf, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  api = require("./api");

  nconf = require('nconf');

  Summoner = (function(_super) {

    __extends(Summoner, _super);

    function Summoner(name, options) {
      var _this = this;
      this.options = _.defaults(options || {}, {
        cache: true,
        region: nconf.get("ELOPHANT:REGION"),
        apikey: nconf.get("ELOPHANT:APIKEY")
      });
      this.cache = {};
      if (_.isString(name)) {
        this._call("summoner", name, function(err, data) {
          if (err) {
            _this.emit("error", err);
          }
          if (data) {
            return _this._init(data);
          }
        });
      } else if (_.isObject(name)) {
        this._init(name);
      } else if (_.isNumber(name)) {
        this._call("summoner_names", name, function(err, data) {
          if (err) {
            _this.emit("error", err);
          }
          if (_.isArray(data) && data.length) {
            return _this._call("summoner", data[0], function(err, d) {
              if (err) {
                _this.emit("error", err);
              }
              if (d) {
                return _this._init(d);
              }
            });
          }
        });
      }
    }

    Summoner.prototype._init = function(data) {
      var _this = this;
      _.each(data, function(v, k) {
        if (!_.has(_this, k)) {
          return _this[k] = v;
        }
      });
      return this.emit("ready");
    };

    Summoner.prototype._handle = function() {
      var args, cache, cb, method, _i;
      method = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
      if (this.options.cache && _.has(this.cache, method)) {
        cache = this.cache[method];
        if (_.isFunction(cb)) {
          return cb(null, cache);
        } else {
          return cache;
        }
      } else {
        return this._call(method, args, cb);
      }
    };

    Summoner.prototype._call = function() {
      var a, args, callback, cb, method, options, _i, _ref,
        _this = this;
      method = arguments[0], args = 4 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 2) : (_i = 1, []), options = arguments[_i++], cb = arguments[_i++];
      if (_.isFunction(options)) {
        _ref = [options, {}], cb = _ref[0], options = _ref[1];
      }
      options = _.extend(options || {}, {
        region: this.options.region,
        apikey: this.options.apikey
      });
      callback = function(err, data) {
        if (data && _this.options.cache) {
          _this.cache[method] = data;
        }
        if (_.isFunction(cb)) {
          return cb.apply(null, arguments);
        }
      };
      a = _.chain([args, options, callback]).flatten().compact().value();
      return api[method].apply(null, a);
    };

    Summoner.prototype.masteryPages = function(cb) {
      return this._handle("mastery_pages", this.summonerId, cb);
    };

    Summoner.prototype.runePages = function(cb) {
      return this._handle("rune_pages", this.summonerId, cb);
    };

    Summoner.prototype.recentGames = function(cb) {
      return this._handle("recent_games", this.acctId, cb);
    };

    Summoner.prototype.leagues = function(cb) {
      return this._handle("leagues", this.summonerId, cb);
    };

    Summoner.prototype.summonerTeamInfo = function(complex, cb) {
      var _ref;
      if (_.isFunction(complex)) {
        _ref = [complex, true], cb = _ref[0], complex = _ref[1];
      }
      return this._handle("summoner_team_info", this.summonerId, {
        complex: complex
      }, cb);
    };

    Summoner.prototype.inProgressGameInfo = function(cb) {
      return this._handle("in_progress_game_info", this.name, cb);
    };

    Summoner.prototype.rankedStats = function(season, cb) {
      var _ref;
      if (_.isFunction(season)) {
        _ref = [season, null], cb = _ref[0], season = _ref[1];
      }
      return this._handle("ranked_stats", this.acctId, season, cb);
    };

    return Summoner;

  })(EventEmitter);

  module.exports = Summoner;

}).call(this);
